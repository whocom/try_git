Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3    
  
//recursion  
    public ArrayList<TreeNode> generateTrees(int n) {
        if(n == 0)
        {
            return new ArrayList<TreeNode>();    
        }
        return helper(1, n);
    }
    
    private ArrayList<TreeNode> helper(int start, int end)
    {
        ArrayList<TreeNode> result = new ArrayList<TreeNode>();
        if(start == end)
        {
            result.add(new TreeNode(start));
        }
        else if(start < end)
        {
            for(int partition = start; partition <= end; partition++)
            {
                ArrayList<TreeNode> temp = new ArrayList<TreeNode>();
                ArrayList<TreeNode> subResult = new ArrayList<TreeNode>();
                ArrayList<TreeNode> left = helper(start, partition - 1);
                ArrayList<TreeNode> right = helper(partition + 1, end);
                for(TreeNode node: left)
                {
                    TreeNode root = new TreeNode(partition);
                    root.left = node;
                    temp.add(root);
                }
                if(left.size() == 0)
                {
                    temp.add(new TreeNode(partition));
                }
                for(TreeNode path: temp)
                {
                    for(TreeNode node: right)
                    {
                        TreeNode t = new TreeNode(0);
                        t.val = path.val;
                        t.left = path.left;
                        t.right = node;
                        subResult.add(t);
                    }
                    if(right.size() == 0)
                    {
                        subResult.add(path);
                    }
                }
                result.addAll(subResult);
            }
        }
        return result;
    }
