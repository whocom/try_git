Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:

    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

//recursion
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(root == null)
        {
            return true;
        }
        return isSymmetric(root.left, root.right);
        
    }
    
    private boolean isSymmetric(TreeNode left, TreeNode right)
    {
        if((left == null && right != null) || (left != null && right == null))
        {
            return false;
        }
        if(left == null && right == null)
        {
            return true;
        }
        return left.val == right.val && isSymmetric(left.left, right.right) && isSymmetric(left.right, right.left);
    }
}

//iteration
    public boolean isSymmetric(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(root == null)
        {
            return true;
        }
        LinkedList<TreeNode> left = new LinkedList<TreeNode>();
        LinkedList<TreeNode> right = new LinkedList<TreeNode>();
        if(root.left != null)
        {
            left.add(root.left);
        }
        if(root.right != null)
        {
            right.add(root.right);
        }
        while(!(left.size() == 0 && right.size() ==0))
        {
            if(left.size() == 0 || right.size() == 0)
            {
                return false;
            }
            TreeNode l = left.pollFirst();
            TreeNode r = right.pollFirst();
            if(l.val != r.val)
            {
                return false;
            }
            if(l.left != null && r.right != null)
            {
                left.add(l.left);
                right.add(r.right);
            }
            if((l.left != null && r.right == null) || (l.left == null && r.right != null))
            {
                return false;
            }
            if(l.right != null && r.left != null)
            {
                left.add(l.right);
                right.add(r.left);
            }
            if((l.right != null && r.left == null) || (l.right == null && r.left != null))
            {
                return false;
            }
        }
        return true;
    }
