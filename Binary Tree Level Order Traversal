Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(root == null)
        {
            return result;
        }
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        int currentLevel = 1, nextLevel = 0;
        while(queue.size() != 0)
        {
            ArrayList<Integer> level = new ArrayList<Integer>();
            while(currentLevel != 0)
            {                
                TreeNode node = queue.pollFirst();
                if(node.left != null)
                {
                    queue.add(node.left);
                    nextLevel++;
                }
                if(node.right != null)
                {
                    queue.add(node.right);
                    nextLevel++;
                }

                level.add(node.val);

                currentLevel--;
            }
            currentLevel = nextLevel;
            nextLevel = 0;
            result.add(level);
        }
        return result;
    }
}
