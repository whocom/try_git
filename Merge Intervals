Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].


  public static ArrayList<Interval> merge(ArrayList<Interval> intervals) {
    if(intervals == null || intervals.size() == 0 || intervals.size() == 1){
      return intervals;
    }
    ArrayList<Interval> result = new ArrayList<Interval>();
    Comparator<Interval> c = new Comparator<Interval>(){
      public int compare(Interval i1, Interval i2){
        if(i1 == null || i2 == null){
          return 0;
        }
        if(i1.start < i2.start){
          return -1;
        }
        else if(i1.start > i2.start){
          return 1;
        }
        else{
          if(i1.end < i2.end){
            return -1;
          }
          else if(i1.end > i2.end){
            return 1;
          }
          else{
            return 0;
          }
        }
      }
    };
    Collections.sort(intervals, c);

    boolean lastMerged = false;
    for(int i = 1; i < intervals.size(); i++){
      int index = i - 1;
      while(i < intervals.size() && intervals.get(index).end >= intervals.get(i).start){
        if(i == intervals.size() - 1){
          lastMerged = true;
        }
        intervals.get(index).end =
            (intervals.get(index).end > intervals.get(i).end)? intervals.get(index).end: intervals.get(i).end;
        i++;
      }
      result.add(intervals.get(index));
    }
    if(!lastMerged){
      result.add(intervals.get(intervals.size() - 1));
    }    
    return result;
  }
