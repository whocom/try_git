Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

//recursive
    public boolean isScramble(String s1, String s2) {
        if(s1 == null || s2 == null)
        {
          return s1  == null && s2 == null;
        }
        if(s1.length() != s2.length())
        {
          return false;
        }
        if(s1.equals(s2))
        {
          return true;
        }
        return helper(s1, s2);
    }
    
    private boolean helper(String s1, String s2)
    {
        if(s1.equals(s2))
        {
            return true;
        }
        if(s1.length() == 1)
        {
            return false;
        }
        for(int i = 1; i < s1.length(); i++)
        {
            if((helper(s1.substring(0, i), s2.substring(s2.length() - i, s2.length())) 
                && helper(s1.substring(i, s1.length()), s2.substring(0, s2.length() - i)))
            || (helper(s1.substring(0, i), s2.substring(0, i)) && helper(s1.substring(i), s2.substring(i))))
            {
                return true;       
            }
        }
        return false;
    }
    
//iteration
    public boolean isScramble(String s1, String s2) {
        if(s1 == null || s2 == null)
        {
          return s1  == null && s2 == null;
        }
        if(s1.length() != s2.length())
        {
          return false;
        }
        if(s1.equals(s2))
        {
          return true;
        }
        boolean validScramble[][][] = new boolean[s1.length()][s2.length()][s1.length()];
        for(int length = 0; length < s1.length(); length++)
        {
            for(int i = 0; i + length < s1.length(); i++)
            {
                for(int j = 0; j + length< s2.length(); j++)
                    {
                        if(length == 0)
                        {
                            validScramble[i][j][length] = s1.charAt(i) == s2.charAt(j);
                        }
                        else
                        {
                            if(s1.substring(i, i + length + 1).equals(s2.substring(j, j + length + 1)))
                            {
                                validScramble[i][j][length] = true;
                            }
                            else
                            {
                                boolean found = false;
                                for(int split = 1; split <= length; split++)
                                {
                                    if((validScramble[i][j][split - 1] && validScramble[i + split][j + split][length - split])
                                    || (validScramble[i][j + length - split + 1][split - 1] && validScramble[i + split][j][length - split]))
                                    {
                                        found = true;
                                        break;
                                    }
                                }
                                validScramble[i][j][length] = found;
                            }
                        }
                    }
            }
        }
        return validScramble[0][0][s1.length() - 1];
    }
