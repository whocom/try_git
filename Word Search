Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

    public boolean exist(char[][] board, String word) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(board == null || board.length == 0 || word == null || word.length() == 0){
            return false;
        }
        boolean[][] visited = new boolean[board.length][board[0].length];
        int height = board.length, width = board[0].length;
        for(int i = 0; i < height; i++){
            for(int j = 0; j < width; j++){
                if(found(board, i, j, word, 0, visited)){
                    return true;
                }    
            }
        }
        return false;
    }
    
    private boolean found(char[][] board, int i, int j, String word, int index, boolean[][] visited){
        if(index == word.length()){
            return true;
        }
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length
        || board[i][j] != word.charAt(index) || visited[i][j] == true){
            return false;
        }
        visited[i][j] = true;
        boolean result = found(board, i + 1, j, word, index + 1, visited) || found(board, i - 1, j, word, index + 1, visited)
                      || found(board, i, j + 1, word, index + 1, visited) || found(board, i, j - 1, word, index + 1, visited);
        if(result == false){
            visited[i][j] = false;
        }
        return result;
    }
