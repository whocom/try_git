Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1].

    public ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(num == null || num.length == 0){
            return result;
        }
        Arrays.sort(num);
        ArrayList<Integer> container = new ArrayList<Integer>();
        boolean[] visited = new boolean[num.length];
        helper(num, result, container, visited);
        return result;        
    }
    
    private void helper(int[] num, 
                        ArrayList<ArrayList<Integer>> result, 
                        ArrayList<Integer> container, 
                        boolean[] visited){
        if(container.size() == num.length){
            ArrayList<Integer> temp = new ArrayList<Integer>(container);
            result.add(temp);
            return;
        }    
        for(int i = 0; i < num.length; i++){
            if(visited[i] == true){
                continue;
            }
            visited[i] = true;
            container.add(num[i]);
            helper(num, result, container, visited);
            container.remove(container.size() - 1);
            visited[i] = false;
            while(i + 1 < num.length && num[i] == num[i + 1]){
                i++;
            }
        }
    }
