Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
  //recursion
  public int numTrees(int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(n <= 0)
        {
            return 0;
        }
        return proc(n);
    }
    
    private int proc(int n)
    {
        
        if(n == 1 || n == 0)
        {
            return 1;
        }
        int sum = 0;
        for(int i = 0; i < n; i++)
        {
            sum += proc(i) * proc(n - i - 1);
        }
        return sum;
    }
    
    //iteration
        public int numTrees(int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(n <= 0)
        {
            return 0;
        }
        int[] num = new int[n + 1];
        
        num[0] = 1;
        num[1] = 1;
        for(int i = 2; i <= n; i++)
        {
            for(int j = 0; j < i; j++)
            {
                num[i] += num[j] * num[i - j - 1];
            }
        }
        return num[n];
    }
