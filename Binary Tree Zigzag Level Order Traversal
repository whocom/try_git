Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]

OJ's Binary Tree Serialization:
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.

Here's an example:

   1
  / \
 2   3
    /
   4
    \
     5
The above binary tree is serialized as "{1,2,3,#,#,4,#,#,5}".

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(root == null)
        {
            return result;
        }
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        int currentLevel = 1, nextLevel = 0;
        boolean leftToRight = false;
        while(queue.size() != 0)
        {
            ArrayList<Integer> level = new ArrayList<Integer>();
            while(currentLevel != 0)
            {                
                TreeNode node = queue.pollFirst();
                if(node.left != null)
                {
                    queue.add(node.left);
                    nextLevel++;
                }
                if(node.right != null)
                {
                    queue.add(node.right);
                    nextLevel++;
                }
                if(leftToRight)
                {
                    level.add(0, node.val);   
                }
                else
                {
                    level.add(node.val);
                }
                
                currentLevel--;
            }
            currentLevel = nextLevel;
            nextLevel = 0;
            leftToRight = !leftToRight;
            result.add(level);
        }
        return result;
    }
}
