    public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(root == null)
        {
            return res;
        }
        ArrayList<Integer> path = new ArrayList<Integer>();
        find(root, sum, path, res);
        
        return res;
    }
    
    private void find(TreeNode node, int remaining, ArrayList<Integer> path, ArrayList<ArrayList<Integer>> res)
    {
        if(node == null)
        {
            return;
        }
        
        path.add(node.val);
        if(node.left == null && node.right == null)
        {
            if(remaining == node.val)
            {
                
                res.add(path);
            }
            return;
        }
        
        remaining -= node.val;
        ArrayList<Integer> l1 = new ArrayList<Integer>(path), l2 = new ArrayList<Integer>(path);
        find(node.left, remaining, l1, res);
        find(node.right, remaining, l2, res);
    }
