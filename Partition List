Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.    
    
    
    public ListNode partition(ListNode head, int x) {
        if(head == null){
            return head;
        }
        ListNode l1 = null, l2 = null;
        ListNode smaller = null, greater = null;
        while(head != null){
            if(head.val < x){
                if(smaller == null){
                    l1 = head;
                    smaller = head;                    
                }
                else{
                    smaller.next = head;
                    smaller = smaller.next;
                }
                head = head.next;
                smaller.next = null;
            }
            else{
                if(greater == null){
                    l2 = head;
                    greater = head;
                }
                else{
                    greater.next = head;
                    greater = greater.next;
                }
                head = head.next;
                greater.next = null;
            }          
        }
        if(l1 != null){
            smaller.next = l2;
            return l1;
        }
        return l2;
    }
