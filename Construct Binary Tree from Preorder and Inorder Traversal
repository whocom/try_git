    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(preorder == null || inorder == null)
        {
            return null;
        }
        if(preorder.length != inorder.length || preorder.length == 0)
        {
            return null;
        }
        return buildTreeHelper(preorder, inorder, 0, preorder.length - 1, 0, inorder.length - 1);
    }
    
    public TreeNode buildTreeHelper(int[] preorder, int[] inorder, int preorderStart, int preorderEnd, int inorderStart, int inorderEnd)
    {
        if(preorderStart > preorderEnd || inorderStart > inorderEnd)
        {
            return null;
        }
        int root = preorder[preorderStart];
        TreeNode node = new TreeNode(root);
        int index = indexOf(inorder, inorderStart, inorderEnd, root);
        int preorderSplit = index - inorderStart + preorderStart;
        node.left = buildTreeHelper(preorder, inorder, preorderStart + 1, preorderSplit,
                                                       inorderStart, index - 1);
        node.right = buildTreeHelper(preorder, inorder, preorderSplit + 1, preorderEnd,
                                                       index + 1, inorderEnd);
        return node;
    }
    
    private int indexOf(int[] arr, int start, int end, int target)
    {
        for(int i = start; i <= end; i++)
        {
            if(arr[i] == target)
            {
                return i;
            }
        }
        return -1;
    }
