Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

    public boolean isValidBST(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(root == null)
        {
            return true;
        }
        int min = Integer.MIN_VALUE;
        int max = Integer.MAX_VALUE;
        return isValid(root, min, max);
    }
    
    private boolean isValid(TreeNode node, int min, int max)
    {
        if(node == null)
        {
            return true;
        }
        return (node.val > min && node.val < max) && isValid(node.left, min, node.val) && isValid(node.right, node.val, max);
    }
