Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ? m ? n ? length of list.   
    
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null || m >= n || n <= 0 || m <= 0)
        {
            return head;
        }
        int i = 1;
        ListNode current = head, previous = null;
        while(current != null && i < m)
        {
            previous = current;
            current = current.next;
            i++;
        }
        if(current == null)
        {
            return head;
        }
        ListNode next = null, temp = null, end = current;
        while(i <= n && current != null)
        {
            next = current.next;
            current.next = temp;
            temp = current;
            current = next;
            i++;
        }
        end.next = next;
        if(previous != null)
        {
            previous.next = temp;
        }
        if(m == 1)
        {
            head = temp;
        }
        return head;
    }
