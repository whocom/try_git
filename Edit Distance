Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

    public int minDistance(String word1, String word2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(word1 == null){
            if(word2 == null){
                return 0;
            } 
            else{
                return word2.length();
            }
        }
        if(word2 == null){
            return word1.length();
        }
        int[][] dist = new int[word1.length() + 1][word2.length() + 1];
        for(int i = 0; i < word1.length() + 1; i++){
            for(int j = 0; j < word2.length() + 1; j++){
                if(i == 0){
                    dist[i][j] = j;
                }
                else if(j == 0){
                    dist[i][j] = i;
                }
                else{
                    if(word1.charAt(i - 1) == word2.charAt(j - 1)){
                        dist[i][j] = dist[i - 1][j - 1];
                    }
                    else{
                        int min = dist[i - 1][j] > dist[i][j - 1]? dist[i][j - 1]: dist[i - 1][j];
                        if(min > dist[i - 1][j - 1]){
                            min = dist[i - 1][j - 1];
                        }
                        dist[i][j] = min + 1;
                    }
                }
            }
        }
        return dist[word1.length()][word2.length()];
    }
